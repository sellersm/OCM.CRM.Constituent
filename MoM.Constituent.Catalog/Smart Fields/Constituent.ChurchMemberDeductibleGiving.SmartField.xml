<SmartFieldSpec
	xmlns="bb_appfx_smartfield"
	xmlns:common="bb_appfx_commontypes"
	ID="0F81B149-E9C4-4CE2-9A5F-5A0C7748D033"
	Name="Church Member Deductible Giving Smart Field"
	Description="Total deductible giving of a Church's members (does not include church giving)"
	Author="Cary Mayeda"
	SPName="USR_USP_SMARTFIELD_CHURCHMEMBERGIVING"
	DataType="Money"
	RecordType="Constituent"
	DisplayName="Church member deductible giving"
	SmartFieldFolder="Constituent"
	>
	<!-- 
	Remarks:    

	History:
	Date            Modified By     Comments
	03-Sep-2015		CMayeda			Initial Version
	-->

	<!-- describe the SP used to calculate the smart field values -->
	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_SMARTFIELD_CHURCHMEMBERGIVING
(
	@STARTDATE date,
	@ENDDATE date,
	@ASOF datetime 
)
as
	-- write sql to calculate the smart field values based on the parameters and ASOF date
begin

	;with ChurchRelationships as
	(
	select 
		church.ID as ChurchID,
		church.LOOKUPID as ChurchLookupID,
		church.NAME as ChurchName,
		RELATIONSHIPTYPECODE.[DESCRIPTION] as Relationship,
		churchmember.ID as MemberID,
		churchmember.LOOKUPID as MemberLookupID,
		churchmember.NAME as MemberName,
		[RECIPROCALRELATIONSHIPTYPECODE].[DESCRIPTION] as RelationshipReciprocal,
		r.STARTDATE,
		r.ENDDATE
	from
		dbo.CONSTITUENT church
		join dbo.RELATIONSHIP r on r.RELATIONSHIPCONSTITUENTID = church.ID
		join dbo.CONSTITUENT churchmember on r.RECIPROCALCONSTITUENTID = churchmember.ID
		left join dbo.RELATIONSHIPTYPECODE on RELATIONSHIPTYPECODE.ID = r.RELATIONSHIPTYPECODEID
		left join dbo.RELATIONSHIPTYPECODE [RECIPROCALRELATIONSHIPTYPECODE] on [RECIPROCALRELATIONSHIPTYPECODE].ID = r.RECIPROCALTYPECODEID
	where
		RELATIONSHIPTYPECODE.[DESCRIPTION] = 'Church' or [RECIPROCALRELATIONSHIPTYPECODE].DESCRIPTION = 'Church Member'
	),

	ChurchPayments as
	(
	select distinct
		ft.CALCULATEDUSERDEFINEDID as REVENUELOOKUPID,
		split.ID as FINANCIALTRANSACTIONLINEITEMID,
		split_ext.APPLICATION as APPLICATION,
		ft.[TYPE] as REVENUETYPE,
		cast (ft.[DATE] as date) as REVENUEDATE,
		split.BASEAMOUNT as SPLITAMOUNT,
		case 
			when split_designation.USERID is null then event.LOOKUPID
			else split_designation.USERID 
		end as DESIGNATIONLOOKUPID,
		case 
			when split_designation.NAME is null then event.NAME
			else split_designation.NAME 
		end as DESIGNATIONNAME,
		rg_application.CALCULATEDUSERDEFINEDID,
		c.ID as MEMBERID,
		c.LOOKUPID as MEMBERLOOKUPID,
		ChurchRelationships.ChurchID,
		case
			when rg_application_ext.RECEIPTAMOUNT is null then eventpayment.RECEIPTAMOUNT
			else rg_application_ext.RECEIPTAMOUNT 
		end as RECEIPTAMOUNT,
		case
			when rg_application.BASEAMOUNT is null then eventpayment.AMOUNT
			else rg_application.BASEAMOUNT 
		end as AMOUNT,
		event.LOOKUPID,
		event.NAME,
		eventpayment.RECEIPTAMOUNT as EVENTRECEIPTAMOUNT,
		eventpayment.AMOUNT as EVENTAMOUNT
	from 
		dbo.FINANCIALTRANSACTION ft
		join ChurchRelationships on ft.CONSTITUENTID = ChurchRelationships.MemberID
		left join dbo.FINANCIALTRANSACTIONLINEITEM split on ft.ID = split.FINANCIALTRANSACTIONID and split.DELETEDON is null and split.typecode = 0 -- standard
		left join dbo.REVENUESPLIT_EXT split_ext on split_ext.ID = split.ID
		left join dbo.DESIGNATION split_designation on split_designation.ID = split_ext.DESIGNATIONID
		left join dbo.RECURRINGGIFTACTIVITY rg_activity on rg_activity.PAYMENTREVENUEID = split.ID
		left join dbo.FINANCIALTRANSACTION rg_application ON rg_application.ID = rg_activity.SOURCEREVENUEID and rg_application.DELETEDON is null
		left join dbo.REVENUE_EXT rg_application_ext on rg_application.ID = rg_application_ext.ID --and rg_application.DELETEDON is null
		left join dbo.CONSTITUENT c on c.ID = ft.CONSTITUENTID
		left join dbo.EVENTREGISTRANTPAYMENT eventpayment on eventpayment.PAYMENTID = split.ID
		left join dbo.REGISTRANT registrant on registrant.ID = eventpayment.REGISTRANTID
		left join dbo.EVENT event on registrant.EVENTID = event.ID
	where 
		cast(ft.[DATE] as date) between @STARTDATE and @ENDDATE
	and ft.BASEAMOUNT > 0
	and ft.TYPECODE = 0

	and (coalesce (split_designation.USERID, event.LOOKUPID) not like 'M-%'
		or 
		coalesce (split_designation.USERID, event.LOOKUPID) = 'M-9001'
		)
	and coalesce (split_designation.USERID, event.LOOKUPID) not like 'V-%'

	)
	select  
		distinct
		ChurchID,
		sum (SPLITAMOUNT) as TOTALGIVING
	from 
		ChurchPayments -- ** NEED TO ADD THIS -- where RECEIPTAMOUNT <> AMOUNT
	group by 
		ChurchID

end


		]]>
	</CreateProcedureSQL>

	<!-- describe any parameters (other than the ASOF date) defined on the SP -->
	<common:FormMetaData>
		<common:FormFields>
			<common:FormField Caption="Start Date" FieldID="STARTDATE" DataType="Date"/>
			<common:FormField Caption="End Date" FieldID="ENDDATE" DataType="Date"/>
		</common:FormFields>

	</common:FormMetaData>

</SmartFieldSpec>